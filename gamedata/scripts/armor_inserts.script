--[[
=======================================================================================
	Ballistic Armor Inserts
	by Vintar
	
	Mod configuration menu functionality would be nice to add
	
	Credit: Arti for original codebase, Grok for methods to get ammo type
	
	Version Log:
	1.0.0 - Vintar
=======================================================================================
--]]

--===================================== Variables ====================================
local plate_cond = {}
local update_plate_condition = true
local coeff = 0.012			-- used to calculate damage multiplier. By default, kevlar plates hit multiplier is 0.20

--[[
1st parameter is damage multiplier, 
2nd parameter is condition loss on hit for ratio = 1, 
3rd parameter is k_ap that penetrates a brand new plate
]]
local plate_sections = {
    ["af_kevlar"] = { 	-- normal kevlar inserts stop FMJ handgun rounds (II or BR3)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_kevlar_absorbation","fire_wound_immunity"),
		cond_loss = 0.07, 
	 	armor_rating = 0.25 },		
	["af_kevlar_up"] = { -- better kevlar inserts (IIIA or BR4)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_kevlar_up_absorbation","fire_wound_immunity"),
		cond_loss = 0.05,
		armor_rating = 0.35 },		
    ["af_plates"] = { -- standard steel plates (III+ or BR4)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_plates_absorbation","fire_wound_immunity"),
		cond_loss = 0.20,
		armor_rating = 0.60 },		
    ["af_plates_up"] = { -- next-gen steel plates (IV or BR5)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_plates_up_absorbation","fire_wound_immunity"),
		cond_loss = 0.20,
		armor_rating = 1.10 },		
	["af_ceramic"] = { -- normal ceramic plates stop AP large-calibers (IV or BR5)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_ceramic_absorbation","fire_wound_immunity"),
		cond_loss = 0.35,
		armor_rating = 1.30 },		
	["af_ceramic_up"] = {-- next-gen ceramic plate can stop .300 (IV or BR6)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_ceramic_up_absorbation","fire_wound_immunity"), 
		cond_loss = 0.30,
		armor_rating = 1.70 },		
	["af_polymer"] = {-- standard UHMWPE plates (III or BR4)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_polymer_absorbation","fire_wound_immunity"),
		cond_loss = 0.10, 
		armor_rating = 0.45 },		
	["af_polymer_up"] = { -- next-gen UHMWPE/ceramic composite plates (IV or BR5)
		hit_multiplier = coeff / ini_sys:r_float_ex("af_polymer_up_absorbation","fire_wound_immunity"),
		cond_loss = 0.15, 
		armor_rating = 1.10 },		
}

-- includes chest bones, and any arm bones potentially in the path of the bullet that would hit the chest are included
local protected_bones = {
	[11] = true,	-- spine
	[12] = true,	-- spine1
	[13] = true,	-- spine2
	[21] = true,	-- l_upperarm		-- assumes right-handed actor
	[22] = true,	-- l_forearm
	[23] = true,	-- l_forearm
	[35] = true,	-- r_forearm
	[36] = true,	-- r_forearm
}

-- When actor is hit in the head by a gunshot, will take extra damage (but not trigger plate)
local head_bones = {
	[14] = true,	-- neck
	[15] = true,	-- head
	[16] = true,	-- l_eye
	[17] = true,	-- r_eye
	[18] = true,	-- eyelid
	[19] = true		-- jaw
}

--==================================== Requirements =====================================
--[[
-- user must use Arti Attachments Addon
if not arti_slot_control then 
	return 
end
--]]
--==================================== Callbacks =======================================

-- plate type is 
-- hit state is 0 for block, 1 for penetration, 2 for breakage, 3 for injury breakage
local timeout = 500
local last = nil
local function play_appropriate_sounds(material, hit_state)
	local tg = time_global()
	if not last then last = tg end
	if tg < last + timeout then return end
	last = tg
	local sound = ""
	local path = "attachments\\"
	local injury = false
	local ricochet = false
	if hit_state == 0 then
		sound = "hit_"..math.random(3)
		ricochet = true
	elseif hit_state == 1 then
		sound = "pierce_"..math.random(3)
		injury = true
	elseif hit_state == 2 then
		sound = "break"
	elseif hit_state == 3 then
		sound = "break"
		injury = true
	end
	ricochet = ricochet and material == "metal" and math.random(5) == 5
	if ricochet then
		-- printf("Playing ricochet")
		utils_obj.play_sound(path.."ricochet_"..math.random(6), 3)
	end
	if injury then
		-- printf("Playing injury")
		utils_obj.play_sound(path.."flesh_"..math.random(6), 3)
	end
	-- printf("Playing "..material.."_"..sound)
	utils_obj.play_sound(path..material.."_"..sound, 6)
end

local function actor_on_before_hit(shit,bone_id)
	-- only proceed for gunshot wounds that would impact the chest or back
	if (shit.type == hit.fire_wound) then
		if head_bones[bone_id] then
			shit.power = shit.power * 1.5		-- all hits to the head do 50% more damage
			return								-- and then exit function
		elseif protected_bones[bone_id] then
			shit.power = shit.power * 1.2		-- all hits to the chest and back do 20% more damage
		else
			return				-- hits to other parts don't trigger this function
		end
	else
		return			-- only trigger for bullet wounds
	end
	
	local found = false
	local plate
	local hit_multiplier
	local plate_name
	
	-- check belt for plates
	db.actor:iterate_belt( 
	function (owner, obj)
		if obj and not found and plate_sections[obj:section()] then
			plate = obj
			plate_name = plate:section()
			hit_multiplier = plate_sections[plate_name].hit_multiplier
			found = true
		end
	end
	)

	if not found then
		return
	end
	
	if (plate ) then
		local ratio			-- multiplier to plate condition loss calculated from bullet's AP vs armor's defense
		local armor_rating = plate_sections[plate_name].armor_rating
		local armor_condition = plate:condition()
		local armor_defense = armor_rating * armor_condition -- effective defense
		local msg = game.translate_string("st_armor_absorbed")-- "Armor insert absorbed impact"
		
		local shooter = shit.draftsman
		local wpn = shooter:active_item()
		local shot_type = 0
		if (wpn) then
			-- get ammo armor penetration
			local wpn_id = wpn:id()
			local wpn_sec = wpn:section()
			local ammo_type_number = wpn:get_ammo_type()
			local ammo_list = utils_item.get_ammo(wpn_sec, wpn_id)
			local ammo_section = ammo_list[ammo_type_number+1]
			local k_ap = ini_sys:r_float_ex(ammo_section, "k_ap") or 0

			ratio = k_ap / armor_defense
			-- printf("Bullet AP is %s, armor defense is %s. Defense Ratio is %s", k_ap, armor_defense, ratio)
			-- armor's ability to stop rounds is diminished as it loses condition
			if (ratio > 1) then
				printdbg("Bullet with AP %s penetrated %s", k_ap, plate_name)
				shit.power = shit.power * 0.9					-- penetrating the armor still consumes a small amount of the projectile's energy
				msg = game.translate_string("st_armor_penetrated")--"Bullet penetrated armor insert!"
				shot_type = 1
			else
				shit.power = shit.power * hit_multiplier		-- reduce damage
			end
		else
			-- grenade shrapnel is blocked by all inserts
			ratio = 0.05 / armor_defense
			shit.power = shit.power * hit_multiplier			-- reduce damage
		end

		-- decrease plate condition
		local cond_loss = plate_sections[plate_name].cond_loss * math.max(ratio, 0.5) -- minimum condition loss is ratio = 0.5
		local cond = clamp(plate:condition() - cond_loss, 0, 1)
		plate:set_condition(cond)
		printdbg("%s condition decreased to %s", plate_name, cond)
		
		-- delete broken plates, and notify actor of fully broken plate
		if plate and plate:condition() < 0.005 then
			alife_release_id(plate:id())
			shot_type = shot_type + 2
			if arti_slot_control_mcm.get_config("ballisticMessage") then
				local message = game.translate_string("st_armor_broken")--"Ballistic insert has fully broken"
				news_manager.send_tip(db.actor, message, nil, "swiss_knife", 6000)
			end
		end
		
		-- inform actor of hit
        if arti_slot_control_mcm.get_config("ballisticMessage")  then
			actor_menu.set_msg(1, msg, 3)
		end		
		-- play appropriate sounds
		local material = SYS_GetParam(0, plate:section(), "material") or "kevlar"
		play_appropriate_sounds(material, shot_type)

	end
end

function on_game_start()
	RegisterScriptCallback("actor_item_to_belt",actor_add_plate)
	RegisterScriptCallback("GUI_on_show",actor_menu_opened)
	RegisterScriptCallback("actor_on_before_hit",actor_on_before_hit)
	RegisterScriptCallback("server_entity_on_unregister", server_entity_on_unregister)
end